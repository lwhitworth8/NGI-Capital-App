  const [expanded] = useState(false)
  const badges = [...(p.partner_badges||[]), ...(p.backer_badges||[])]
  const partnerLogos = (p as any).partner_logos || []
  const backerLogos = (p as any).backer_logos || []
  const statusIsActive = String(p.status).toLowerCase() === 'active'
  const hero = p.hero_image_url || ((p as any).gallery_urls?.[0]) || ''
  const isAbsolute = (u: string) => /^(\/|https?:|blob:|data:)/.test(u)
  const heroSrc = hero ? (isAbsolute(String(hero)) ? String(hero) : `/${hero}`) : ''
  const withBasePath = (u?: string) => {
    const s = String(u || '')
    if (!s) return s
    if (/^(https?:|data:|blob:)/.test(s)) return s
    const baseUrl = (process.env.NEXT_PUBLIC_ADMIN_BASE_URL || '/admin')
    const basePath = baseUrl.replace(/^https?:\/\/[^/]+/i, '') || ''
    if (s.startsWith('/clients/')) return `${basePath}${s}`
    return s
  }
  const autoClientLogo = (() => {
    const name = (p.client_name || '').trim()
    if (!name) return null
    const url = KNOWN_CLIENTS[name]
    return url ? { name, url } : null
  })()
  const goDetail = () => {
    if (typeof window !== 'undefined') {
      const base = (process.env.NEXT_PUBLIC_ADMIN_BASE_URL || '/admin').replace(/\/$/, '')
      window.location.href = `${base}/ngi-advisory/projects/${p.id}`
    }
  }
  return (
    <div className="w-full cursor-pointer" onClick={goDetail}>
      <div className="flex items-center p-3 md:p-4 gap-4 rounded-xl border border-border bg-card">
        <div className="h-36 md:h-44 w-56 md:w-72 bg-muted overflow-hidden flex-shrink-0 relative">
          {heroSrc ? (
            <img src={heroSrc} alt="hero" className="absolute inset-0 w-full h-full object-cover" />
          ) : (
            <div className="absolute inset-0 w-full h-full bg-muted" />
          )}
        </div>
        <div className="flex-1 min-w-0">
          {/* Title + Status */}
          <div className="flex items-start gap-2">
            <div className="text-base md:text-lg font-semibold truncate">{p.project_name}</div>
            <span className={`text-xxs ml-auto ${statusIsActive ? 'text-green-600' : 'text-muted-foreground'}`}>{statusIsActive ? 'Active' : (String(p.status || '').charAt(0).toUpperCase() + String(p.status || '').slice(1))}</span>
          </div>
          {/* Client identity (logo + name) */}
          <div className="mt-1 flex items-center gap-2 min-w-0">
            {(autoClientLogo || partnerLogos[0]) && (
              <img src={withBasePath((autoClientLogo?.url || (partnerLogos[0] as any)?.url) as string)} alt={p.client_name || 'Client'} className="h-5 w-5 object-contain" />
            )}
            <div className="text-xs text-foreground truncate">{p.client_name}</div>
          </div>
          <div className="text-sm text-muted-foreground mt-1 line-clamp-1 md:line-clamp-2">{p.summary}</div>
          {/* Stats tags */}
          <div className="flex flex-wrap items-center gap-2 mt-2">
            {p.duration_weeks ? (<span className="text-xxs px-2 py-0.5 rounded border">{p.duration_weeks} weeks</span>) : null}
            {p.commitment_hours_per_week ? (<span className="text-xxs px-2 py-0.5 rounded border">{p.commitment_hours_per_week} hrs/wk</span>) : null}
            {typeof (p as any).team_size === 'number' && (p as any).team_size > 0 ? (<span className="text-xxs px-2 py-0.5 rounded border">Team {(p as any).team_size}</span>) : null}
            {(p.start_date || p.end_date) ? (
              <span className="text-xxs px-2 py-0.5 rounded border">
                {(p.start_date || '').slice(0,10)}{p.end_date ? ' → ' + String(p.end_date).slice(0,10) : ''}
              </span>
            ) : null}
          </div>
          {/* Logos or badges */}
          <div className="flex items-center gap-3 mt-2">
            {[autoClientLogo, ...partnerLogos, ...backerLogos].filter(Boolean).slice(0,4).map((x: any, i: number) => (
              <div key={i} className="flex items-center gap-2">
                <img src={withBasePath(x.url)} alt={x.name} className="h-5 w-5 object-contain" />
                <span className="text-xs text-muted-foreground hidden sm:inline">{x.name}</span>
              </div>
            ))}
            {partnerLogos.length === 0 && badges.slice(0,3).map((b,i)=> (
              <span key={i} className="text-[10px] px-1.5 py-0.5 rounded bg-muted">{b}</span>
            ))}
          </div>
          {(p as any)._lead_names && (p as any)._lead_names.length > 0 && (
            <div className="text-xs text-muted-foreground/90 mt-1 truncate">Leads: {(p as any)._lead_names.join(', ')}</div>
          )}
          {typeof (p as any).open_roles === 'number' && typeof (p as any).team_size === 'number' ? (
            <div className="text-xs text-muted-foreground/90 mt-1">Open roles: {(p as any).open_roles} / {(p as any).team_size}</div>
          ) : null}
          {expanded && (
            <div className="mt-3 text-sm text-foreground/90">{p.description || '—'}</div>
          )}
          <div className="mt-3 flex items-center gap-2" onClick={(e)=>e.stopPropagation()}>
            <button className="px-3 py-1.5 text-sm rounded-md border" onClick={onEdit}>Edit</button>
            <button className="px-3 py-1.5 text-sm rounded-md border">Close</button>
            {(() => { const base = (process.env.NEXT_PUBLIC_STUDENT_BASE_URL || 'http://localhost:3001').replace(/\/$/, ''); const url = `${base}/projects/${p.id}`; return (
              <>
                <a className="ml-auto px-3 py-1.5 text-sm rounded-md border hover:bg-accent" href={url}>Open as Student</a>
                <a className="px-3 py-1.5 text-sm rounded-md border hover:bg-accent" href={`${url}#apply`}>Apply</a>
                <a className="px-3 py-1.5 text-sm rounded-md border hover:bg-accent" href={`${url}#coffeechat`}>Request Coffee Chat</a>
              </>
            )})()}
          </div>
        </div>
      </div>
    </div>
  )
}


// Majors chips input with basic suggestions and alias handling
function MajorsChips({ allMajors, aliases, value, onChange }: { allMajors: string[]; aliases: Record<string,string>; value: string[]; onChange: (v: string[]) => void }) {
  const [input, setInput] = useState('')
  const normalized = (s: string) => (aliases[s] || s)
  const add = (s: string) => {
    const v = normalized(s.trim())
    if (!v) return
    const exists = value.some(x => x.toLowerCase() === v.toLowerCase())
    if (!exists) onChange([...value, v])
    setInput('')
  }
  const remove = (s: string) => onChange(value.filter(x => x !== s))
  const suggestions = allMajors.filter(m => m.toLowerCase().includes(input.trim().toLowerCase()) && !value.includes(m)).slice(0,6)
  return (
    <div className="w-full">
      <div className="flex flex-wrap gap-2 mb-2">
        {value.map(m => (
          <span key={m} className="inline-flex items-center gap-1 px-2 py-1 text-xs rounded-full bg-muted border">
            {m}
            <button className="text-muted-foreground hover:text-foreground" onClick={() => remove(m)}>×</button>
          </span>
        ))}
      </div>
      <input
        className="w-full px-3 py-2 border rounded-md bg-background"
        placeholder="Type a major (e.g., CS, Finance) and press Enter"
        value={input}
