            sa_text(
                "SELECT p.id, p.name FROM projects p JOIN employee_projects ep ON ep.project_id = p.id WHERE ep.employee_id = :eid"
            ),
            {"eid": r[0]},
        ).fetchall()
        result.append(
            {
                "id": r[0],
                "name": r[1],
                "email": r[2],
                "title": r[3],
                "role": r[4],
                "classification": r[5],
                "status": r[6],
                "employment_type": r[7],
                "start_date": r[8],
                "end_date": r[9],
                "team_id": r[10],
                "team_name": r[11],
                "projects": [{"id": pr[0], "name": pr[1]} for pr in projects],
            }
        )
    return result


@router.post("/employees")
async def create_employee(
    payload: Dict[str, Any],
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    entity_id = _resolve_entity_id(payload.get("entity"), payload.get("entity_id"))
    name = (payload.get("legal_name") or payload.get("name") or "").strip()
    email = (payload.get("email") or "").strip()
    if not entity_id or not name or not email:
        raise HTTPException(status_code=422, detail="Missing required fields")
    classification = (payload.get("classification") or "").strip().lower()
    team_id = None
    if classification == "executive":
        _ensure_default_teams(db, entity_id)
        row = db.execute(
            sa_text("SELECT id FROM teams WHERE entity_id = :e AND lower(name) = 'executive'"),
            {"e": entity_id},
        ).fetchone()
        team_id = int(row[0]) if row else None
    db.execute(
        sa_text(
            """
            INSERT INTO employees (entity_id, name, legal_name, preferred_name, email, title, role, classification, status, employment_type, start_date, end_date, team_id, manager_id, created_at, updated_at)
            VALUES (:e,:n,:ln,:pn,:em,:ti,:ro,:cl,:st,:et,:sd,:ed,:tid,:mid,datetime('now'),datetime('now'))
            """
        ),
        {
            "e": entity_id,
            "n": name,
            "ln": name,
            "pn": payload.get("preferred_name") or None,
            "em": email,
            "ti": payload.get("title"),
            "ro": payload.get("role"),
            "cl": payload.get("classification"),
            "st": payload.get("status") or "active",
            "et": payload.get("employment_type") or None,
            "sd": payload.get("start_date") or None,
            "ed": payload.get("end_date") or None,
            "tid": team_id,
            "mid": payload.get("manager_id") or None,
        },
    )
    new_id = int(db.execute(sa_text("SELECT last_insert_rowid()" )).scalar() or 0)
    # Optional memberships
    try:
        memberships = payload.get("memberships") or []
        if isinstance(memberships, list):
            for m in memberships:
                try:
                    ent = _resolve_entity_id(m.get("entity"), m.get("entityId") or m.get("entity_id"))
                    if not ent:
                        continue
                    ap = float(m.get("allocationPct") or m.get("allocation_pct") or 100)
                    pr = 1 if (m.get("primary") or m.get("primary_entity")) else 0
                    db.execute(
                        sa_text("INSERT OR IGNORE INTO employee_entity_memberships (employee_id, entity_id, allocation_pct, primary_entity) VALUES (:eid,:ent,:ap,:pr)"),
                        {"eid": new_id, "ent": ent, "ap": ap, "pr": pr},
                    )
                except Exception:
                    pass
    except Exception:
        pass
    pids = payload.get("project_ids") or []
    if isinstance(pids, list) and pids:
        for pid in pids:
            try:
                db.execute(
                    sa_text("INSERT INTO employee_projects (employee_id, project_id) VALUES (:eid,:pid)"),
                    {"eid": new_id, "pid": int(pid)},
                )
            except Exception:
                pass
    db.commit()
    return {"id": new_id}


@router.put("/employees/{emp_id}")
async def update_employee(
    emp_id: int,
    payload: Dict[str, Any],
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    fields = [
        ("name", "name"),
        ("email", "email"),
        ("title", "title"),
        ("role", "role"),
        ("classification", "classification"),
        ("status", "status"),
        ("employment_type", "employment_type"),
        ("start_date", "start_date"),
        ("end_date", "end_date"),
        ("team_id", "team_id"),
    ]
    sets = []
    params: Dict[str, Any] = {"id": emp_id}
    for key, col in fields:
        if key in payload:
            sets.append(f"{col} = :{key}")
            params[key] = payload[key]
    if sets:
        sql = "UPDATE employees SET " + ", ".join(sets) + " WHERE id = :id"
        db.execute(sa_text(sql), params)
        db.commit()
    return {"message": "updated"}


@router.delete("/employees/{emp_id}")
async def delete_employee(
    emp_id: int,
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    db.execute(sa_text("UPDATE employees SET is_deleted = 1 WHERE id = :id"), {"id": emp_id})
    db.commit()
    return {"message": "deleted"}


@router.post("/employees/{emp_id}/memberships")
async def add_employee_membership(
    emp_id: int,
    payload: Dict[str, Any],
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    ent = _resolve_entity_id(payload.get("entity"), payload.get("entityId") or payload.get("entity_id"))
    if not ent:
        raise HTTPException(status_code=422, detail="entity is required")
    ap = float(payload.get("allocationPct") or payload.get("allocation_pct") or 100)
    pr = 1 if (payload.get("primary") or payload.get("primary_entity")) else 0
    db.execute(
        sa_text("INSERT OR REPLACE INTO employee_entity_memberships (employee_id, entity_id, allocation_pct, primary_entity) VALUES (:eid,:ent,:ap,:pr)"),
        {"eid": emp_id, "ent": ent, "ap": ap, "pr": pr},
    )
    db.commit()
    return {"message": "added"}


@router.get("/employees/kpis")
async def employees_kpis(
    entity_id: int,
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    from datetime import datetime as _dt, timezone as _tz, timedelta as _td
    now = _dt.now(_tz.utc)
    def parse(d):
        try:
            return _dt.fromisoformat(d)
        except Exception:
            try:
                return _dt.fromisoformat(d+"T00:00:00")
            except Exception:
                return None
    rows = db.execute(sa_text("SELECT status, employment_type, start_date, end_date FROM employees WHERE entity_id = :e AND (is_deleted IS NULL OR is_deleted = 0)"), {"e": entity_id}).fetchall()
    total = len(rows)
    active = sum(1 for r in rows if (r[0] or 'active').lower() == 'active')
    new_hires = sum(1 for r in rows if (parse(r[2]) and (now - parse(r[2]).replace(tzinfo=_tz.utc) <= _td(days=30))))
    attrition = sum(1 for r in rows if (parse(r[3]) and (now - parse(r[3]).replace(tzinfo=_tz.utc) <= _td(days=365))))
    contractors = sum(1 for r in rows if (r[1] or '').lower() in ('contractor','contract'))
    interns_students = sum(1 for r in rows if (r[1] or '').lower() in ('intern','student'))
    months = []
    for r in rows:
        sd = parse(r[2]); ed = parse(r[3]) or now
        if sd:
            months.append(max(0, (ed - sd.replace(tzinfo=_tz.utc)).days/30.0))
    avg_tenure = round(sum(months)/len(months), 1) if months else 0.0
    return {
        "headcount": total,
        "active": active,
        "newHires30d": new_hires,
        "openRoles": 0,
        "attrition12m": attrition,
        "avgTenureMonths": avg_tenure,
        "payrollThisMonth": 0,
        "contractors": contractors,
        "interns_or_students": interns_students,
    }


@router.get("/employee-todos")
async def list_employee_todos(
    entity_id: int,
    assignee: int | None = None,
    status: str | None = None,
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    q = "SELECT id, employee_id, entity_id, title, notes, due_at, status, created_by, created_at, updated_at FROM employee_tasks WHERE entity_id = :e"
    params: Dict[str, Any] = {"e": entity_id}
    if assignee:
        q += " AND employee_id = :a"; params["a"] = assignee
    if status:
        q += " AND status = :s"; params["s"] = status
    rows = db.execute(sa_text(q + " ORDER BY COALESCE(due_at, created_at) ASC"), params).fetchall()
    return [
        {"id": r[0], "employee_id": r[1], "entity_id": r[2], "title": r[3], "notes": r[4], "due_at": r[5], "status": r[6], "created_by": r[7], "created_at": r[8], "updated_at": r[9]}
        for r in rows
    ]


@router.post("/employee-todos")
async def create_employee_todo(
    payload: Dict[str, Any],
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    eid = int(payload.get('entity_id') or 0)
    title = (payload.get('title') or '').strip()
    if not eid or not title:
        raise HTTPException(status_code=422, detail="entity_id and title required")
    db.execute(sa_text("INSERT INTO employee_tasks (employee_id, entity_id, title, notes, due_at, status, created_by, created_at, updated_at) VALUES (:emp,:ent,:ti,:no,:due,:st,:cb,datetime('now'),datetime('now'))"),
               {"emp": payload.get('employee_id'), "ent": eid, "ti": title, "no": payload.get('notes'), "due": payload.get('due_at'), "st": payload.get('status') or 'Open', "cb": partner.get('email') if isinstance(partner, dict) else None})
    new_id = int(db.execute(sa_text("SELECT last_insert_rowid()")).scalar() or 0)
    db.commit()
    return {"id": new_id}


@router.patch("/employee-todos/{task_id}")
async def patch_employee_todo(
    task_id: int,
    payload: Dict[str, Any],
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    fields = []
    params: Dict[str, Any] = {"id": task_id}
    for k in ("title","notes","due_at","status","employee_id"):
        if k in payload:
            fields.append(f"{k} = :{k}")
            params[k] = payload[k]
    if not fields:
        return {"message": "no changes"}
    db.execute(sa_text("UPDATE employee_tasks SET " + ", ".join(fields) + ", updated_at = datetime('now') WHERE id = :id"), params)
    db.commit()
    return {"message": "updated"}


@router.post("/employees/import")
async def import_employees(
    payload: Dict[str, Any],
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    """
    Import employees from CSV text. Columns: name, email, type, start, entity, team
    Accepts payload.csv as string. Dedupe by email.
    """
    _ensure_hr_schema(db)
    csv_text = payload.get("csv")
    if not isinstance(csv_text, str) or not csv_text.strip():
        raise HTTPException(status_code=422, detail="csv required")
    import csv as _csv
    from io import StringIO as _SIO
    reader = _csv.DictReader(_SIO(csv_text))
    created = 0
    for row in reader:
        name = (row.get("name") or "").strip()
        email = (row.get("email") or "").strip().lower()
        if not name or not email:
            continue
        # Skip if exists
        exists = db.execute(sa_text("SELECT id FROM employees WHERE lower(email) = :em AND (is_deleted = 0 OR is_deleted IS NULL)"), {"em": email}).fetchone()
        if exists:
            continue
        ent = row.get("entity") or payload.get("entity") or payload.get("entity_id")
        ent_id = _resolve_entity_id(ent, None)
        team_id = None
        tname = (row.get("team") or "").strip()
        if ent_id and tname:
            tr = db.execute(sa_text("SELECT id FROM teams WHERE entity_id = :e AND lower(name) = :n"), {"e": ent_id, "n": tname.lower()}).fetchone()
            if tr:
                team_id = int(tr[0])
        db.execute(
            sa_text("INSERT INTO employees (entity_id, name, legal_name, email, employment_type, start_date, team_id, status, created_at, updated_at) VALUES (:e,:n,:n,:em,:tp,:sd,:tid,'active',datetime('now'),datetime('now'))"),
            {
                "e": ent_id or 0,
                "n": name,
                "em": email,
                "tp": row.get("type") or None,
                "sd": row.get("start") or None,
                "tid": team_id,
            },
        )
        created += 1
    db.commit()
    return {"created": created}


@router.get("/employees/export")
async def export_employees(
    entity: int | None = Query(None),
    entity_id: int | None = Query(None),
    partner=Depends(require_partner_access()),
    db: Session = Depends(get_db),
):
    _ensure_hr_schema(db)
    eid = _resolve_entity_id(entity, entity_id)
    if not eid:
        raise HTTPException(status_code=422, detail="entity is required")
    if _has_table(db, "employee_entity_memberships"):
        rows = db.execute(sa_text("SELECT e.name, e.email, e.employment_type, e.start_date FROM employees e JOIN employee_entity_memberships m ON m.employee_id = e.id AND m.entity_id = :e WHERE (e.is_deleted = 0 OR e.is_deleted IS NULL)"), {"e": eid}).fetchall()
    else:
        rows = db.execute(sa_text("SELECT name, email, employment_type, start_date FROM employees WHERE entity_id = :e AND (is_deleted = 0 OR is_deleted IS NULL)"), {"e": eid}).fetchall()
    import csv as _csv
    from io import StringIO as _SIO
    out = _SIO()
    w = _csv.writer(out)
    w.writerow(["name","email","type","start","entity"])
    for r in rows:
        w.writerow([r[0], r[1], r[2] or "", r[3] or "", eid])
    return {"csv": out.getvalue()}
